#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Beraberiz2")]
	public partial class WeAreTogetherDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnimal(Animal instance);
    partial void UpdateAnimal(Animal instance);
    partial void DeleteAnimal(Animal instance);
    partial void InsertUserPhone(UserPhone instance);
    partial void UpdateUserPhone(UserPhone instance);
    partial void DeleteUserPhone(UserPhone instance);
    partial void InsertResponsibleOfManagement(ResponsibleOfManagement instance);
    partial void UpdateResponsibleOfManagement(ResponsibleOfManagement instance);
    partial void DeleteResponsibleOfManagement(ResponsibleOfManagement instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertShelter(Shelter instance);
    partial void UpdateShelter(Shelter instance);
    partial void DeleteShelter(Shelter instance);
    partial void InsertShelterOfUser(ShelterOfUser instance);
    partial void UpdateShelterOfUser(ShelterOfUser instance);
    partial void DeleteShelterOfUser(ShelterOfUser instance);
    partial void InsertPhoneType(PhoneType instance);
    partial void UpdatePhoneType(PhoneType instance);
    partial void DeletePhoneType(PhoneType instance);
    partial void InsertManager(Manager instance);
    partial void UpdateManager(Manager instance);
    partial void DeleteManager(Manager instance);
    partial void InsertManagementType(ManagementType instance);
    partial void UpdateManagementType(ManagementType instance);
    partial void DeleteManagementType(ManagementType instance);
    partial void InsertManagementShelter(ManagementShelter instance);
    partial void UpdateManagementShelter(ManagementShelter instance);
    partial void DeleteManagementShelter(ManagementShelter instance);
    partial void InsertManagementPhone(ManagementPhone instance);
    partial void UpdateManagementPhone(ManagementPhone instance);
    partial void DeleteManagementPhone(ManagementPhone instance);
    partial void InsertManagementFood(ManagementFood instance);
    partial void UpdateManagementFood(ManagementFood instance);
    partial void DeleteManagementFood(ManagementFood instance);
    partial void InsertManagement(Management instance);
    partial void UpdateManagement(Management instance);
    partial void DeleteManagement(Management instance);
    partial void InsertKindOfAnimal(KindOfAnimal instance);
    partial void UpdateKindOfAnimal(KindOfAnimal instance);
    partial void DeleteKindOfAnimal(KindOfAnimal instance);
    partial void InsertDistrict(District instance);
    partial void UpdateDistrict(District instance);
    partial void DeleteDistrict(District instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    #endregion
		
		public WeAreTogetherDataContext() : 
				base(global::LinqToSql.Properties.Settings.Default.Beraberiz2ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WeAreTogetherDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WeAreTogetherDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WeAreTogetherDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WeAreTogetherDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Animal> Animals
		{
			get
			{
				return this.GetTable<Animal>();
			}
		}
		
		public System.Data.Linq.Table<UserPhone> UserPhones
		{
			get
			{
				return this.GetTable<UserPhone>();
			}
		}
		
		public System.Data.Linq.Table<ResponsibleOfManagement> ResponsibleOfManagements
		{
			get
			{
				return this.GetTable<ResponsibleOfManagement>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Shelter> Shelters
		{
			get
			{
				return this.GetTable<Shelter>();
			}
		}
		
		public System.Data.Linq.Table<ShelterOfUser> ShelterOfUsers
		{
			get
			{
				return this.GetTable<ShelterOfUser>();
			}
		}
		
		public System.Data.Linq.Table<PhoneType> PhoneTypes
		{
			get
			{
				return this.GetTable<PhoneType>();
			}
		}
		
		public System.Data.Linq.Table<Manager> Managers
		{
			get
			{
				return this.GetTable<Manager>();
			}
		}
		
		public System.Data.Linq.Table<ManagementType> ManagementTypes
		{
			get
			{
				return this.GetTable<ManagementType>();
			}
		}
		
		public System.Data.Linq.Table<ManagementShelter> ManagementShelters
		{
			get
			{
				return this.GetTable<ManagementShelter>();
			}
		}
		
		public System.Data.Linq.Table<ManagementPhone> ManagementPhones
		{
			get
			{
				return this.GetTable<ManagementPhone>();
			}
		}
		
		public System.Data.Linq.Table<ManagementFood> ManagementFoods
		{
			get
			{
				return this.GetTable<ManagementFood>();
			}
		}
		
		public System.Data.Linq.Table<Management> Managements
		{
			get
			{
				return this.GetTable<Management>();
			}
		}
		
		public System.Data.Linq.Table<KindOfAnimal> KindOfAnimals
		{
			get
			{
				return this.GetTable<KindOfAnimal>();
			}
		}
		
		public System.Data.Linq.Table<District> Districts
		{
			get
			{
				return this.GetTable<District>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Animal")]
	public partial class Animal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _KindOfAnimalId;
		
		private int _ShelterId;
		
		private string _Name;
		
		private System.DateTime _DateOfRegister;
		
		private string _Note;
		
		private bool _Pet;
		
		private EntityRef<Shelter> _Shelter;
		
		private EntityRef<KindOfAnimal> _KindOfAnimal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnKindOfAnimalIdChanging(int value);
    partial void OnKindOfAnimalIdChanged();
    partial void OnShelterIdChanging(int value);
    partial void OnShelterIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateOfRegisterChanging(System.DateTime value);
    partial void OnDateOfRegisterChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnPetChanging(bool value);
    partial void OnPetChanged();
    #endregion
		
		public Animal()
		{
			this._Shelter = default(EntityRef<Shelter>);
			this._KindOfAnimal = default(EntityRef<KindOfAnimal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KindOfAnimalId", DbType="Int NOT NULL")]
		public int KindOfAnimalId
		{
			get
			{
				return this._KindOfAnimalId;
			}
			set
			{
				if ((this._KindOfAnimalId != value))
				{
					if (this._KindOfAnimal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKindOfAnimalIdChanging(value);
					this.SendPropertyChanging();
					this._KindOfAnimalId = value;
					this.SendPropertyChanged("KindOfAnimalId");
					this.OnKindOfAnimalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelterId", DbType="Int NOT NULL")]
		public int ShelterId
		{
			get
			{
				return this._ShelterId;
			}
			set
			{
				if ((this._ShelterId != value))
				{
					if (this._Shelter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShelterIdChanging(value);
					this.SendPropertyChanging();
					this._ShelterId = value;
					this.SendPropertyChanged("ShelterId");
					this.OnShelterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfRegister", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfRegister
		{
			get
			{
				return this._DateOfRegister;
			}
			set
			{
				if ((this._DateOfRegister != value))
				{
					this.OnDateOfRegisterChanging(value);
					this.SendPropertyChanging();
					this._DateOfRegister = value;
					this.SendPropertyChanged("DateOfRegister");
					this.OnDateOfRegisterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet", DbType="Bit NOT NULL")]
		public bool Pet
		{
			get
			{
				return this._Pet;
			}
			set
			{
				if ((this._Pet != value))
				{
					this.OnPetChanging(value);
					this.SendPropertyChanging();
					this._Pet = value;
					this.SendPropertyChanged("Pet");
					this.OnPetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelter_Animal", Storage="_Shelter", ThisKey="ShelterId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Shelter Shelter
		{
			get
			{
				return this._Shelter.Entity;
			}
			set
			{
				Shelter previousValue = this._Shelter.Entity;
				if (((previousValue != value) 
							|| (this._Shelter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shelter.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._Shelter.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._ShelterId = value.Id;
					}
					else
					{
						this._ShelterId = default(int);
					}
					this.SendPropertyChanged("Shelter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KindOfAnimal_Animal", Storage="_KindOfAnimal", ThisKey="KindOfAnimalId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public KindOfAnimal KindOfAnimal
		{
			get
			{
				return this._KindOfAnimal.Entity;
			}
			set
			{
				KindOfAnimal previousValue = this._KindOfAnimal.Entity;
				if (((previousValue != value) 
							|| (this._KindOfAnimal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KindOfAnimal.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._KindOfAnimal.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._KindOfAnimalId = value.Id;
					}
					else
					{
						this._KindOfAnimalId = default(int);
					}
					this.SendPropertyChanged("KindOfAnimal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPhone")]
	public partial class UserPhone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserId;
		
		private string _PhoneNumber;
		
		private System.Nullable<int> _PhoneId;
		
		private EntityRef<User> _User;
		
		private EntityRef<PhoneType> _PhoneType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneIdChanging(System.Nullable<int> value);
    partial void OnPhoneIdChanged();
    #endregion
		
		public UserPhone()
		{
			this._User = default(EntityRef<User>);
			this._PhoneType = default(EntityRef<PhoneType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Char(11)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneId", DbType="Int")]
		public System.Nullable<int> PhoneId
		{
			get
			{
				return this._PhoneId;
			}
			set
			{
				if ((this._PhoneId != value))
				{
					if (this._PhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneId = value;
					this.SendPropertyChanged("PhoneId");
					this.OnPhoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPhone", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPhones.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPhones.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneType_UserPhone", Storage="_PhoneType", ThisKey="PhoneId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public PhoneType PhoneType
		{
			get
			{
				return this._PhoneType.Entity;
			}
			set
			{
				PhoneType previousValue = this._PhoneType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneType.Entity = null;
						previousValue.UserPhones.Remove(this);
					}
					this._PhoneType.Entity = value;
					if ((value != null))
					{
						value.UserPhones.Add(this);
						this._PhoneId = value.Id;
					}
					else
					{
						this._PhoneId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PhoneType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResponsibleOfManagement")]
	public partial class ResponsibleOfManagement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _ManagementId;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnManagementIdChanging(int value);
    partial void OnManagementIdChanged();
    #endregion
		
		public ResponsibleOfManagement()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagementId", DbType="Int NOT NULL")]
		public int ManagementId
		{
			get
			{
				return this._ManagementId;
			}
			set
			{
				if ((this._ManagementId != value))
				{
					this.OnManagementIdChanging(value);
					this.SendPropertyChanging();
					this._ManagementId = value;
					this.SendPropertyChanged("ManagementId");
					this.OnManagementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ResponsibleOfManagement", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ResponsibleOfManagements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ResponsibleOfManagements.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<int> _DistrictId;
		
		private string _Name;
		
		private string _Surname;
		
		private string _IdentityNumber;
		
		private System.Nullable<bool> _Gender;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private string _Address;
		
		private string _Username;
		
		private string _Password;
		
		private System.Nullable<int> _Point;
		
		private EntitySet<UserPhone> _UserPhones;
		
		private EntitySet<ResponsibleOfManagement> _ResponsibleOfManagements;
		
		private EntitySet<ShelterOfUser> _ShelterOfUsers;
		
		private EntitySet<ManagementFood> _ManagementFoods;
		
		private EntityRef<District> _District;
		
		private EntityRef<District> _District1;
		
		private EntityRef<District> _District2;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnDistrictIdChanging(System.Nullable<int> value);
    partial void OnDistrictIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnIdentityNumberChanging(string value);
    partial void OnIdentityNumberChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPointChanging(System.Nullable<int> value);
    partial void OnPointChanged();
    #endregion
		
		public User()
		{
			this._UserPhones = new EntitySet<UserPhone>(new Action<UserPhone>(this.attach_UserPhones), new Action<UserPhone>(this.detach_UserPhones));
			this._ResponsibleOfManagements = new EntitySet<ResponsibleOfManagement>(new Action<ResponsibleOfManagement>(this.attach_ResponsibleOfManagements), new Action<ResponsibleOfManagement>(this.detach_ResponsibleOfManagements));
			this._ShelterOfUsers = new EntitySet<ShelterOfUser>(new Action<ShelterOfUser>(this.attach_ShelterOfUsers), new Action<ShelterOfUser>(this.detach_ShelterOfUsers));
			this._ManagementFoods = new EntitySet<ManagementFood>(new Action<ManagementFood>(this.attach_ManagementFoods), new Action<ManagementFood>(this.detach_ManagementFoods));
			this._District = default(EntityRef<District>);
			this._District1 = default(EntityRef<District>);
			this._District2 = default(EntityRef<District>);
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="Int")]
		public System.Nullable<int> DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if ((this._DistrictId != value))
				{
					if (((this._District.HasLoadedOrAssignedValue || this._District1.HasLoadedOrAssignedValue) 
								|| this._District2.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdentityNumber", DbType="Char(11)")]
		public string IdentityNumber
		{
			get
			{
				return this._IdentityNumber;
			}
			set
			{
				if ((this._IdentityNumber != value))
				{
					this.OnIdentityNumberChanging(value);
					this.SendPropertyChanging();
					this._IdentityNumber = value;
					this.SendPropertyChanged("IdentityNumber");
					this.OnIdentityNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Point", DbType="Int")]
		public System.Nullable<int> Point
		{
			get
			{
				return this._Point;
			}
			set
			{
				if ((this._Point != value))
				{
					this.OnPointChanging(value);
					this.SendPropertyChanging();
					this._Point = value;
					this.SendPropertyChanged("Point");
					this.OnPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPhone", Storage="_UserPhones", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserPhone> UserPhones
		{
			get
			{
				return this._UserPhones;
			}
			set
			{
				this._UserPhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ResponsibleOfManagement", Storage="_ResponsibleOfManagements", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<ResponsibleOfManagement> ResponsibleOfManagements
		{
			get
			{
				return this._ResponsibleOfManagements;
			}
			set
			{
				this._ResponsibleOfManagements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ShelterOfUser", Storage="_ShelterOfUsers", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<ShelterOfUser> ShelterOfUsers
		{
			get
			{
				return this._ShelterOfUsers;
			}
			set
			{
				this._ShelterOfUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ManagementFood", Storage="_ManagementFoods", ThisKey="Id", OtherKey="ResponsibleUser")]
		public EntitySet<ManagementFood> ManagementFoods
		{
			get
			{
				return this._ManagementFoods;
			}
			set
			{
				this._ManagementFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_User", Storage="_District", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._DistrictId = value.Id;
					}
					else
					{
						this._DistrictId = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_User1", Storage="_District1", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true)]
		public District District1
		{
			get
			{
				return this._District1.Entity;
			}
			set
			{
				District previousValue = this._District1.Entity;
				if (((previousValue != value) 
							|| (this._District1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District1.Entity = null;
						previousValue.Users1.Remove(this);
					}
					this._District1.Entity = value;
					if ((value != null))
					{
						value.Users1.Add(this);
						this._DistrictId = value.Id;
					}
					else
					{
						this._DistrictId = default(Nullable<int>);
					}
					this.SendPropertyChanged("District1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_User2", Storage="_District2", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true)]
		public District District2
		{
			get
			{
				return this._District2.Entity;
			}
			set
			{
				District previousValue = this._District2.Entity;
				if (((previousValue != value) 
							|| (this._District2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District2.Entity = null;
						previousValue.Users2.Remove(this);
					}
					this._District2.Entity = value;
					if ((value != null))
					{
						value.Users2.Add(this);
						this._DistrictId = value.Id;
					}
					else
					{
						this._DistrictId = default(Nullable<int>);
					}
					this.SendPropertyChanged("District2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_User", Storage="_City", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPhones(UserPhone entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPhones(UserPhone entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ResponsibleOfManagements(ResponsibleOfManagement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ResponsibleOfManagements(ResponsibleOfManagement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ShelterOfUsers(ShelterOfUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ShelterOfUsers(ShelterOfUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ManagementFoods(ManagementFood entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ManagementFoods(ManagementFood entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shelter")]
	public partial class Shelter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<int> _DistrictId;
		
		private string _Name;
		
		private string _Address;
		
		private string _Phone;
		
		private EntitySet<Animal> _Animals;
		
		private EntityRef<District> _District;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnDistrictIdChanging(System.Nullable<int> value);
    partial void OnDistrictIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public Shelter()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			this._District = default(EntityRef<District>);
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="Int")]
		public System.Nullable<int> DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if ((this._DistrictId != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelter_Animal", Storage="_Animals", ThisKey="Id", OtherKey="ShelterId")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Shelter", Storage="_District", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.Shelters.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.Shelters.Add(this);
						this._DistrictId = value.Id;
					}
					else
					{
						this._DistrictId = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Shelter", Storage="_City", ThisKey="CityId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Shelters.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Shelters.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Shelter = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Shelter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShelterOfUser")]
	public partial class ShelterOfUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _ShelterId;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnShelterIdChanging(System.Nullable<int> value);
    partial void OnShelterIdChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public ShelterOfUser()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelterId", DbType="Int")]
		public System.Nullable<int> ShelterId
		{
			get
			{
				return this._ShelterId;
			}
			set
			{
				if ((this._ShelterId != value))
				{
					this.OnShelterIdChanging(value);
					this.SendPropertyChanging();
					this._ShelterId = value;
					this.SendPropertyChanged("ShelterId");
					this.OnShelterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ShelterOfUser", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ShelterOfUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ShelterOfUsers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhoneType")]
	public partial class PhoneType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<UserPhone> _UserPhones;
		
		private EntitySet<ManagementPhone> _ManagementPhones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PhoneType()
		{
			this._UserPhones = new EntitySet<UserPhone>(new Action<UserPhone>(this.attach_UserPhones), new Action<UserPhone>(this.detach_UserPhones));
			this._ManagementPhones = new EntitySet<ManagementPhone>(new Action<ManagementPhone>(this.attach_ManagementPhones), new Action<ManagementPhone>(this.detach_ManagementPhones));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneType_UserPhone", Storage="_UserPhones", ThisKey="Id", OtherKey="PhoneId")]
		public EntitySet<UserPhone> UserPhones
		{
			get
			{
				return this._UserPhones;
			}
			set
			{
				this._UserPhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneType_ManagementPhone", Storage="_ManagementPhones", ThisKey="Id", OtherKey="PhoneTypeId")]
		public EntitySet<ManagementPhone> ManagementPhones
		{
			get
			{
				return this._ManagementPhones;
			}
			set
			{
				this._ManagementPhones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPhones(UserPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = this;
		}
		
		private void detach_UserPhones(UserPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = null;
		}
		
		private void attach_ManagementPhones(ManagementPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = this;
		}
		
		private void detach_ManagementPhones(ManagementPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Manager")]
	public partial class Manager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Manager()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManagementType")]
	public partial class ManagementType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Management> _Managements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ManagementType()
		{
			this._Managements = new EntitySet<Management>(new Action<Management>(this.attach_Managements), new Action<Management>(this.detach_Managements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManagementType_Management", Storage="_Managements", ThisKey="Id", OtherKey="ManagementTypeId")]
		public EntitySet<Management> Managements
		{
			get
			{
				return this._Managements;
			}
			set
			{
				this._Managements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.ManagementType = this;
		}
		
		private void detach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.ManagementType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManagementShelter")]
	public partial class ManagementShelter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ManagementId;
		
		private System.Nullable<int> _ShelterId;
		
		private System.Nullable<bool> _Active;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnManagementIdChanging(System.Nullable<int> value);
    partial void OnManagementIdChanged();
    partial void OnShelterIdChanging(System.Nullable<int> value);
    partial void OnShelterIdChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public ManagementShelter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagementId", DbType="Int")]
		public System.Nullable<int> ManagementId
		{
			get
			{
				return this._ManagementId;
			}
			set
			{
				if ((this._ManagementId != value))
				{
					this.OnManagementIdChanging(value);
					this.SendPropertyChanging();
					this._ManagementId = value;
					this.SendPropertyChanged("ManagementId");
					this.OnManagementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelterId", DbType="Int")]
		public System.Nullable<int> ShelterId
		{
			get
			{
				return this._ShelterId;
			}
			set
			{
				if ((this._ShelterId != value))
				{
					this.OnShelterIdChanging(value);
					this.SendPropertyChanging();
					this._ShelterId = value;
					this.SendPropertyChanged("ShelterId");
					this.OnShelterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManagementPhone")]
	public partial class ManagementPhone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ManagementId;
		
		private System.Nullable<int> _PhoneTypeId;
		
		private string _PhoneNumber;
		
		private EntityRef<PhoneType> _PhoneType;
		
		private EntityRef<Management> _Management;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnManagementIdChanging(System.Nullable<int> value);
    partial void OnManagementIdChanged();
    partial void OnPhoneTypeIdChanging(System.Nullable<int> value);
    partial void OnPhoneTypeIdChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public ManagementPhone()
		{
			this._PhoneType = default(EntityRef<PhoneType>);
			this._Management = default(EntityRef<Management>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagementId", DbType="Int")]
		public System.Nullable<int> ManagementId
		{
			get
			{
				return this._ManagementId;
			}
			set
			{
				if ((this._ManagementId != value))
				{
					if (this._Management.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagementIdChanging(value);
					this.SendPropertyChanging();
					this._ManagementId = value;
					this.SendPropertyChanged("ManagementId");
					this.OnManagementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeId", DbType="Int")]
		public System.Nullable<int> PhoneTypeId
		{
			get
			{
				return this._PhoneTypeId;
			}
			set
			{
				if ((this._PhoneTypeId != value))
				{
					if (this._PhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeId = value;
					this.SendPropertyChanged("PhoneTypeId");
					this.OnPhoneTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Char(11)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneType_ManagementPhone", Storage="_PhoneType", ThisKey="PhoneTypeId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public PhoneType PhoneType
		{
			get
			{
				return this._PhoneType.Entity;
			}
			set
			{
				PhoneType previousValue = this._PhoneType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneType.Entity = null;
						previousValue.ManagementPhones.Remove(this);
					}
					this._PhoneType.Entity = value;
					if ((value != null))
					{
						value.ManagementPhones.Add(this);
						this._PhoneTypeId = value.Id;
					}
					else
					{
						this._PhoneTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PhoneType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Management_ManagementPhone", Storage="_Management", ThisKey="ManagementId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Management Management
		{
			get
			{
				return this._Management.Entity;
			}
			set
			{
				Management previousValue = this._Management.Entity;
				if (((previousValue != value) 
							|| (this._Management.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Management.Entity = null;
						previousValue.ManagementPhones.Remove(this);
					}
					this._Management.Entity = value;
					if ((value != null))
					{
						value.ManagementPhones.Add(this);
						this._ManagementId = value.Id;
					}
					else
					{
						this._ManagementId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Management");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManagementFood")]
	public partial class ManagementFood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ManagementId;
		
		private System.Nullable<System.DateTime> _DateOfFood;
		
		private System.Nullable<System.DateTime> _DeliveryTime;
		
		private System.Nullable<bool> _SupplyDelivery;
		
		private System.Nullable<int> _ResponsibleUser;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnManagementIdChanging(System.Nullable<int> value);
    partial void OnManagementIdChanged();
    partial void OnDateOfFoodChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfFoodChanged();
    partial void OnDeliveryTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliveryTimeChanged();
    partial void OnSupplyDeliveryChanging(System.Nullable<bool> value);
    partial void OnSupplyDeliveryChanged();
    partial void OnResponsibleUserChanging(System.Nullable<int> value);
    partial void OnResponsibleUserChanged();
    #endregion
		
		public ManagementFood()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagementId", DbType="Int")]
		public System.Nullable<int> ManagementId
		{
			get
			{
				return this._ManagementId;
			}
			set
			{
				if ((this._ManagementId != value))
				{
					this.OnManagementIdChanging(value);
					this.SendPropertyChanging();
					this._ManagementId = value;
					this.SendPropertyChanged("ManagementId");
					this.OnManagementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfFood", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfFood
		{
			get
			{
				return this._DateOfFood;
			}
			set
			{
				if ((this._DateOfFood != value))
				{
					this.OnDateOfFoodChanging(value);
					this.SendPropertyChanging();
					this._DateOfFood = value;
					this.SendPropertyChanged("DateOfFood");
					this.OnDateOfFoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeliveryTime
		{
			get
			{
				return this._DeliveryTime;
			}
			set
			{
				if ((this._DeliveryTime != value))
				{
					this.OnDeliveryTimeChanging(value);
					this.SendPropertyChanging();
					this._DeliveryTime = value;
					this.SendPropertyChanged("DeliveryTime");
					this.OnDeliveryTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplyDelivery", DbType="Bit")]
		public System.Nullable<bool> SupplyDelivery
		{
			get
			{
				return this._SupplyDelivery;
			}
			set
			{
				if ((this._SupplyDelivery != value))
				{
					this.OnSupplyDeliveryChanging(value);
					this.SendPropertyChanging();
					this._SupplyDelivery = value;
					this.SendPropertyChanged("SupplyDelivery");
					this.OnSupplyDeliveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsibleUser", DbType="Int")]
		public System.Nullable<int> ResponsibleUser
		{
			get
			{
				return this._ResponsibleUser;
			}
			set
			{
				if ((this._ResponsibleUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResponsibleUserChanging(value);
					this.SendPropertyChanging();
					this._ResponsibleUser = value;
					this.SendPropertyChanged("ResponsibleUser");
					this.OnResponsibleUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ManagementFood", Storage="_User", ThisKey="ResponsibleUser", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ManagementFoods.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ManagementFoods.Add(this);
						this._ResponsibleUser = value.Id;
					}
					else
					{
						this._ResponsibleUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Management")]
	public partial class Management : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ManagementTypeId;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<int> _DistrictId;
		
		private string _Name;
		
		private string _Address;
		
		private System.Nullable<int> _Point;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<ManagementPhone> _ManagementPhones;
		
		private EntityRef<ManagementType> _ManagementType;
		
		private EntityRef<District> _District;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnManagementTypeIdChanging(System.Nullable<int> value);
    partial void OnManagementTypeIdChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnDistrictIdChanging(System.Nullable<int> value);
    partial void OnDistrictIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPointChanging(System.Nullable<int> value);
    partial void OnPointChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Management()
		{
			this._ManagementPhones = new EntitySet<ManagementPhone>(new Action<ManagementPhone>(this.attach_ManagementPhones), new Action<ManagementPhone>(this.detach_ManagementPhones));
			this._ManagementType = default(EntityRef<ManagementType>);
			this._District = default(EntityRef<District>);
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagementTypeId", DbType="Int")]
		public System.Nullable<int> ManagementTypeId
		{
			get
			{
				return this._ManagementTypeId;
			}
			set
			{
				if ((this._ManagementTypeId != value))
				{
					if (this._ManagementType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagementTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ManagementTypeId = value;
					this.SendPropertyChanged("ManagementTypeId");
					this.OnManagementTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="Int")]
		public System.Nullable<int> DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if ((this._DistrictId != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Point", DbType="Int")]
		public System.Nullable<int> Point
		{
			get
			{
				return this._Point;
			}
			set
			{
				if ((this._Point != value))
				{
					this.OnPointChanging(value);
					this.SendPropertyChanging();
					this._Point = value;
					this.SendPropertyChanged("Point");
					this.OnPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Management_ManagementPhone", Storage="_ManagementPhones", ThisKey="Id", OtherKey="ManagementId")]
		public EntitySet<ManagementPhone> ManagementPhones
		{
			get
			{
				return this._ManagementPhones;
			}
			set
			{
				this._ManagementPhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManagementType_Management", Storage="_ManagementType", ThisKey="ManagementTypeId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public ManagementType ManagementType
		{
			get
			{
				return this._ManagementType.Entity;
			}
			set
			{
				ManagementType previousValue = this._ManagementType.Entity;
				if (((previousValue != value) 
							|| (this._ManagementType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ManagementType.Entity = null;
						previousValue.Managements.Remove(this);
					}
					this._ManagementType.Entity = value;
					if ((value != null))
					{
						value.Managements.Add(this);
						this._ManagementTypeId = value.Id;
					}
					else
					{
						this._ManagementTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ManagementType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Management", Storage="_District", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.Managements.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.Managements.Add(this);
						this._DistrictId = value.Id;
					}
					else
					{
						this._DistrictId = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Management", Storage="_City", ThisKey="CityId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Managements.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Managements.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ManagementPhones(ManagementPhone entity)
		{
			this.SendPropertyChanging();
			entity.Management = this;
		}
		
		private void detach_ManagementPhones(ManagementPhone entity)
		{
			this.SendPropertyChanging();
			entity.Management = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KindOfAnimal")]
	public partial class KindOfAnimal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public KindOfAnimal()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KindOfAnimal_Animal", Storage="_Animals", ThisKey="Id", OtherKey="KindOfAnimalId")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.KindOfAnimal = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.KindOfAnimal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Districts")]
	public partial class District : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _District1;
		
		private int _City;
		
		private EntitySet<User> _Users;
		
		private EntitySet<User> _Users1;
		
		private EntitySet<User> _Users2;
		
		private EntitySet<Shelter> _Shelters;
		
		private EntitySet<Management> _Managements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDistrict1Changing(string value);
    partial void OnDistrict1Changed();
    partial void OnCityChanging(int value);
    partial void OnCityChanged();
    #endregion
		
		public District()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Users1 = new EntitySet<User>(new Action<User>(this.attach_Users1), new Action<User>(this.detach_Users1));
			this._Users2 = new EntitySet<User>(new Action<User>(this.attach_Users2), new Action<User>(this.detach_Users2));
			this._Shelters = new EntitySet<Shelter>(new Action<Shelter>(this.attach_Shelters), new Action<Shelter>(this.detach_Shelters));
			this._Managements = new EntitySet<Management>(new Action<Management>(this.attach_Managements), new Action<Management>(this.detach_Managements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="District", Storage="_District1", DbType="NVarChar(255)")]
		public string District1
		{
			get
			{
				return this._District1;
			}
			set
			{
				if ((this._District1 != value))
				{
					this.OnDistrict1Changing(value);
					this.SendPropertyChanging();
					this._District1 = value;
					this.SendPropertyChanged("District1");
					this.OnDistrict1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_User", Storage="_Users", ThisKey="Id", OtherKey="DistrictId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_User1", Storage="_Users1", ThisKey="Id", OtherKey="DistrictId")]
		public EntitySet<User> Users1
		{
			get
			{
				return this._Users1;
			}
			set
			{
				this._Users1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_User2", Storage="_Users2", ThisKey="Id", OtherKey="DistrictId")]
		public EntitySet<User> Users2
		{
			get
			{
				return this._Users2;
			}
			set
			{
				this._Users2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Shelter", Storage="_Shelters", ThisKey="Id", OtherKey="DistrictId")]
		public EntitySet<Shelter> Shelters
		{
			get
			{
				return this._Shelters;
			}
			set
			{
				this._Shelters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Management", Storage="_Managements", ThisKey="Id", OtherKey="DistrictId")]
		public EntitySet<Management> Managements
		{
			get
			{
				return this._Managements;
			}
			set
			{
				this._Managements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
		
		private void attach_Users1(User entity)
		{
			this.SendPropertyChanging();
			entity.District1 = this;
		}
		
		private void detach_Users1(User entity)
		{
			this.SendPropertyChanging();
			entity.District1 = null;
		}
		
		private void attach_Users2(User entity)
		{
			this.SendPropertyChanging();
			entity.District2 = this;
		}
		
		private void detach_Users2(User entity)
		{
			this.SendPropertyChanging();
			entity.District2 = null;
		}
		
		private void attach_Shelters(Shelter entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_Shelters(Shelter entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
		
		private void attach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Shelter> _Shelters;
		
		private EntitySet<Management> _Managements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public City()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Shelters = new EntitySet<Shelter>(new Action<Shelter>(this.attach_Shelters), new Action<Shelter>(this.detach_Shelters));
			this._Managements = new EntitySet<Management>(new Action<Management>(this.attach_Managements), new Action<Management>(this.detach_Managements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_User", Storage="_Users", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Shelter", Storage="_Shelters", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<Shelter> Shelters
		{
			get
			{
				return this._Shelters;
			}
			set
			{
				this._Shelters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Management", Storage="_Managements", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<Management> Managements
		{
			get
			{
				return this._Managements;
			}
			set
			{
				this._Managements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Shelters(Shelter entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Shelters(Shelter entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Managements(Management entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
}
#pragma warning restore 1591
